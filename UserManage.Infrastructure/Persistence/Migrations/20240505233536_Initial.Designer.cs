// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using UserManage.Infrastructure.Persistence.Context;

#nullable disable

namespace UserManage.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240505233536_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("UserManager.Domain.Entities.Group", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("GroupName");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("AuditCreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("AuditCreateUser")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("AuditDeleteDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("AuditDeleteUser")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("AuditUpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("AuditUpdateUser")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("State")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("UserManager.Domain.Entities.GroupUsers", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("GroupUsersId");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("AuditCreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("AuditCreateUser")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("AuditDeleteDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("AuditDeleteUser")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("AuditUpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("AuditUpdateUser")
                        .HasColumnType("integer");

                    b.Property<long>("Groupid")
                        .HasColumnType("bigint");

                    b.Property<string>("State")
                        .HasColumnType("text");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("Groupid");

                    b.HasIndex("UserId");

                    b.ToTable("GroupUsers");
                });

            modelBuilder.Entity("UserManager.Domain.Entities.Permission", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("PermissionId");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("AuditCreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("AuditCreateUser")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("AuditDeleteDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("AuditDeleteUser")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("AuditUpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("AuditUpdateUser")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("State")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("UserManager.Domain.Entities.Role", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("RoleId");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("AuditCreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("AuditCreateUser")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("AuditDeleteDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("AuditDeleteUser")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("AuditUpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("AuditUpdateUser")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("State")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("UserManager.Domain.Entities.RolePermission", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("RolePermissionId");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("AuditCreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("AuditCreateUser")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("AuditDeleteDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("AuditDeleteUser")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("AuditUpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("AuditUpdateUser")
                        .HasColumnType("integer");

                    b.Property<long>("PermissionId")
                        .HasColumnType("bigint");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.Property<string>("State")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PermissionId");

                    b.HasIndex("RoleId");

                    b.ToTable("RolePermissions");
                });

            modelBuilder.Entity("UserManager.Domain.Entities.RoleUser", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("RoleUserId");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("AuditCreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("AuditCreateUser")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("AuditDeleteDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("AuditDeleteUser")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("AuditUpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("AuditUpdateUser")
                        .HasColumnType("integer");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.Property<string>("State")
                        .HasColumnType("text");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("RoleUsers");
                });

            modelBuilder.Entity("UserManager.Domain.Entities.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("UserId");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("AuditCreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("AuditCreateUser")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("AuditDeleteDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("AuditDeleteUser")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("AuditUpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("AuditUpdateUser")
                        .HasColumnType("integer");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("State")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("UserManager.Domain.Entities.GroupUsers", b =>
                {
                    b.HasOne("UserManager.Domain.Entities.Group", "Group")
                        .WithMany("GroupUsers")
                        .HasForeignKey("Groupid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UserManager.Domain.Entities.User", "User")
                        .WithMany("GroupUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("User");
                });

            modelBuilder.Entity("UserManager.Domain.Entities.RolePermission", b =>
                {
                    b.HasOne("UserManager.Domain.Entities.Permission", "Permission")
                        .WithMany("RolePermissions")
                        .HasForeignKey("PermissionId")
                        .IsRequired();

                    b.HasOne("UserManager.Domain.Entities.Role", "Role")
                        .WithMany("RolePermissions")
                        .HasForeignKey("RoleId")
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("UserManager.Domain.Entities.RoleUser", b =>
                {
                    b.HasOne("UserManager.Domain.Entities.Role", "Role")
                        .WithMany("RoleUsers")
                        .HasForeignKey("RoleId")
                        .IsRequired();

                    b.HasOne("UserManager.Domain.Entities.User", "User")
                        .WithMany("RoleUsers")
                        .HasForeignKey("UserId")
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("UserManager.Domain.Entities.Group", b =>
                {
                    b.Navigation("GroupUsers");
                });

            modelBuilder.Entity("UserManager.Domain.Entities.Permission", b =>
                {
                    b.Navigation("RolePermissions");
                });

            modelBuilder.Entity("UserManager.Domain.Entities.Role", b =>
                {
                    b.Navigation("RolePermissions");

                    b.Navigation("RoleUsers");
                });

            modelBuilder.Entity("UserManager.Domain.Entities.User", b =>
                {
                    b.Navigation("GroupUsers");

                    b.Navigation("RoleUsers");
                });
#pragma warning restore 612, 618
        }
    }
}
